<main>
  <.hero_section />

  <div class="my-20 md:my-24 space-y-24">
    <.feature_section>
      <:icon>
        <Heroicons.cube solid class="w-6 h-6 text-white" />
      </:icon>
      <:title>
        Renderless function components
      </:title>
      <:description>
        Sprout UI component does not render any visible HTML tags.
        It only controls user interactions and related UI states with an underlying <a
          href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements"
          target="_blank"
          class="underline"
        >custom element</a>.
        It is your responsibility to decide how to render the component,
        and all you need to do is just passing attributes to the tags you're rendering.
        You can see the flexibility of renderless component from the example code.
      </:description>
      <:content>
        <.code_example code="dialog" />
      </:content>
    </.feature_section>

    <.feature_section reverse>
      <:icon>
        <Heroicons.lifebuoy solid class="w-6 h-6 text-white" />
      </:icon>
      <:title>
        WAI-ARIA compliant components
      </:title>
      <:description>
        Sprout UI follows the
        <a href="https://www.w3.org/WAI/ARIA/apg/" target="_blank" class="underline">
          WAI-ARIA guide
        </a>
        to create accessible web experiences.
        It fully supports assistive technology like screen readers and keyboard navigations.
        Try using <kbd>Up</kbd> <kbd>Down</kbd> <kbd>Home</kbd> <kbd>End</kbd>
        to navigate through the accordion items and using <kbd>Enter</kbd>
        or <kbd>Space</kbd>
        to expand/collapse the accordion item.
      </:description>
      <:content>
        <.accordion_example />
      </:content>
    </.feature_section>

    <.feature_section>
      <:icon>
        <Heroicons.swatch solid class="w-6 h-6 text-white" />
      </:icon>
      <:title>Styling components made easy</:title>
      <:description>
        Since you're in control of rendering all the HTML tags,
        you can choose whatever styling methods you like.
        Every component is composed of different parts rendered with a
        <code class="inline">data-part</code>
        attribute so that you can style each part using CSS atribute selector.
        And when a component can have multiple UI states,
        these states are presented in a <code class="inline">data-state</code>
        attribute. Sprout UI also comes with a tailwindcss plugin that makes it easier for styling different UI states.
      </:description>
      <:content>
        <.switch_example />
        <.code_example code="switch" class="mt-4" />
      </:content>
    </.feature_section>
  </div>
</main>

<.footer />
